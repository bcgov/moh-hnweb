name: TestEnv-backend-BuildImageAndPush
# Build the image and deploy in OpenShift environment
env:
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  TOOLSNS_IMAGE_REGISTRY: image-registry.apps.silver.devops.gov.bc.ca/c5839f-tools
  TESTNS_IMAGE_REGISTRY: image-registry.apps.silver.devops.gov.bc.ca/c5839f-test
  IMAGE_REGISTRY_USER: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_TOKEN }}
  IMAGE_NAME: mspdirect-backend
  TEST_SUFFIX: -test
  IMAGE_TAGS:

on:
  # Run the workflow on either:
  #   a push to 'main' branch
  #   manually through the Action
  # --------------------------------------------------------------------------

  push:
    branches: [main]
    paths:
      - "backend/**"

  workflow_dispatch:

jobs:
  buildAndPush:
    runs-on: ubuntu-latest

    steps:
      # Check out the code
      - name: Check out code
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: main

      # Determine the version number tag i.e. test_auto_build_main_<build execution>
      - name: Determine Version number
        # Branch name is fixed to 'main' in version identifier
        run: |
          echo "VERSION=test_auto_build_main_${{github.run_number}}" | tee -a $GITHUB_ENV

      # Determine the tags. Create all tags with full names. Only 'tags' are used as this allows specifying
      # the image name in each tag. This is needed because it is different in each namespace as it contains '-test' suffix in the test namespace.
      # Note, with multiple tags all have the same digest value.
      - name: Determine image tags
        run: |
          echo "IMAGE_TAGS=${{ env.TOOLSNS_IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA::12} ${{ env.TOOLSNS_IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:mspdirect${{ env.TEST_SUFFIX }} ${{ env.TOOLSNS_IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} ${{ env.TESTNS_IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}${{ env.TEST_SUFFIX }}:${GITHUB_SHA::12} ${{ env.TESTNS_IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}${{ env.TEST_SUFFIX }}:mspdirect${{ env.TEST_SUFFIX }} ${{ env.TESTNS_IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}${{ env.TEST_SUFFIX }}:${{ env.VERSION }} " | tee -a $GITHUB_ENV

      # Build from docker file.
      - name: Build from Dockerfile
        id: build-docker
        uses: redhat-actions/buildah-build@v2
        with:
          tags: ${{ env.IMAGE_TAGS }}
          context: ./backend
          dockerfiles: |
            ./backend/Dockerfile

      # Push all images at the same time using different tags from the build. This allows having different image names.
      - name: Push to tools and test registry
        id: push-images
        uses: redhat-actions/push-to-registry@v2
        with:
          tags: ${{ steps.build-docker.outputs.tags }}
          username: ${{ env.IMAGE_REGISTRY_USER }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

      # Update the image ID in the manifest repository used by Argo CD.
      # We need to use the SSH deploy key to check out the manifest repo, set up
      # Kustomize in the runner, update the image ID, commit the change, and
      # push the changes back to the manifest repository.
      # ------------------------------------------------------------------------
      - name: Prepare deploy key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.GITOPS_C5839F_PRIVATE_KEY }}

      - name: Check out manifest repo
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GITOPS_C5839F_PRIVATE_KEY }}
          repository: ${{ secrets.GITOPS_C5839F_REPO }}
          ref: main

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Update image ID and commit change
        if: ${{ success() }}
        run: |
          cd mspdirect-devops/overlays/test
          kustomize edit set image "backend-image=image-registry.openshift-image-registry.svc:5000/c5839f-test/${{ env.IMAGE_NAME }}${{ env.TEST_SUFFIX }}@${{ steps.push-images.outputs.digest }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Deploying build: ${{ env.VERSION }} in test using TestEnv-backend-BuildImageAndPush workflow."
          git push origin
